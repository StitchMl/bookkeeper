# .github/workflows/ci-sonar.yml
name: CI + SonarCloud
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]

jobs:
  build-sonar:
    runs-on: ubuntu-latest

    # raccomandato da setup-java ≥ v4
    permissions:
      contents: read
      pull-requests: read

    steps:
      # 1) Checkout sorgenti con history completa (necessaria a Sonar per il blame)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Installa JDK 11 e 17 e genera automaticamente ~/.m2/toolchains.xml
      - name: Setup JDK 11 & 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: |
            8
            11
            17

      # 3) Cache della repo Maven (riduce ~60-70 % del tempo di build)
      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # 4) Build completo + unit test (2 retry automatici per test flakies)
      - name: Build & Unit Test
        run: |
          mvn -B -ntp clean verify \
              -Drat.skip=false \
              -Dsurefire.rerunFailingTestsCount=2

      # 5) Analisi SonarCloud
      - name: SonarCloud scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B -ntp sonar:sonar \
              -Dsonar.projectKey=StitchMl_bookkeeper \
              -Dsonar.login=$SONAR_TOKEN

      # 6) Quality Gate (fallisce il job se il gate è rosso)
      - name: Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN:   ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
